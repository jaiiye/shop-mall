
about SSL >> http://my.oschina.net/zhlmmc/blog/42105

  1. 什么是 https ?
    https 是安全的超文本传输协议. 它能保证请求和响应的数据只在浏览器和服务器端加密前(请求前)和解密后(响应后)才会是明文, 传输的过程中都是完全加密的.
    基于国内一些非技术的原因, 官府很抵触 https 协议, 导致在速度上会更慢一些. 而且加密解密会消耗资源的, 目前只在一些登录等的地方才会走 https.


  2. 基本原理

    加密与算法 >>

    加密是保护信息安全的常用手段之一. 对信息的加密是需要加密算法的, 如果加密算法被破解了, 那么一切免谈. 不过, 基本上, 要破解一个加密算法是非常非常困难的.
    至少, 目前流行的加密算法还是安全的, 所以我们也就不必考虑这个问题了.

    第一节 散列(Hash)
      经常用 bt 下载的人应该很熟悉这个. 这就是 MD5 啊~ 虽然 Hash 不只是 MD5, 常见的还有 SHA1. 不过 MD5 最流行, 所以一般大家说的 hash 就是它了.
      值得一提的是, 山东大学的王小云在2005年的时候发了一篇"How to Break MD5 and Other Hash Functions"引起了信息安全界的轰动.
      虽然我没仔细研读过这篇 paper, 不过我相信按照 paper 里面的说法要破解 MD5 还是很费劲的, 要不早就出乱子了. 所以我们就不考虑这个问题了. 那么究竟什么是 MD5 呢？我来简单解释一下.

      Hash 就是一个工具, 能把任意大小的文档变成一个 固定大小(MD5是32个字符)的字符串. 并且, 这个过程是 不可逆的, 也就是说, 没有任何办法从那个字符串得到原来那个文档.
      还有很重要的一点是,  任意两个文档(哪怕极其相似)得到相同字符串的概率几乎等于0. 现在你有一个10000字的文章, 发给你的朋友, 那你的朋友怎么判断他收到的文章一个标点符号都没有少呢？
      你在发送文章的同时把这个文章的Hash字符串也发过去, 这样你的朋友收到文章以后, 根据收到的文章重新计算一遍这个字符串, 如果这个字符串和你发过去的一样, 那就证明你朋友收到的文章是和你发送的一模一样.

    第二节 对称加密(Symmetric Cryptography)
      所谓加密就是把一段能看懂的东西通过某种变换变成看不懂的东西. 当然这种变换是可逆的, 否则加密有什么用啊！这里所说的"变换"就是加密算法.
      目前我们所说的加密算法基本上都是基于密钥的. 加密算法不能单独工作, 必须有密钥配合. 就像现实生活中的锁, 同一型号的锁的原理都一样,
      但是每把锁都有各自的钥匙, 用来开锁和关锁.  加密的算法是公开的, 但密钥是保密的. 自己"发明"加密算法是很愚蠢的, 除非你是密码学专家.
      历史上有很多使用自己发明的加密算法的笑话, 往往你发明的算法都是自以为是, 其实很容易破解的拉. 而目前流行的加密算法都是经过时间和众人检验的,
      一般情况下, 只要密钥不泄露, 那就是安全的. 有一点要说明的是, 虽然我们平时一般说"加密算法", 但往往这个加密算法都包含解密算法的.
      "对称加密"是指加密和解密的密钥是同一个. 目前流行的对称加密算法有 DES, AES, Blowfish 等等.
      举个例子, 你有一篇文章想要发给你朋友, 但是你不想让别人看见这篇文章所以你选择AES加密. 用的密钥是你和你朋友事先约定的,
      只有你们两个人知道. 在发送之前, 你用AES算法和约定好的密钥给文章加密, 然后把加密过的文章发送给你的朋友.
      你朋友收到以后可以用AES算法和那个密钥解密而获得原始的那篇文章.  对称加密算法的优点是速度快, 缺点是密钥管理不方便, 要求共享密钥.

    第三节    非对称加密(Asymmetric Cryptography)
      如果你理解了上面讲的对称加密, 那么这里的非对称加密就很简单了. 从字面上理解就可以猜到,  加密和解密不是用的同一个密钥,
      其中一个称为公钥(public key), 另一个称为私钥(private key). 公钥就是公开的, 大家都知道, 而私钥只有你自己知道.
      这两个密钥在数学上是有联系的, 用公钥加密的内容只能由相应的私钥来解密, 反过来, 用私钥加密的内容只能由相应的公钥来解密.
      另外很重要的一点是,  不能从公钥推导出私钥, 或者说很困难. 常用的非对称加密算法有 RSA, ECC 等等. 举个例子, 你想要把一篇文章发送给你的朋友,
      但是不想让别人看到这篇文章. 除了用上面讲的方法以外, 你还可以用非对称加密来实现. 在发送之前, 你把文章用你朋友的公钥加密(公钥是公开的, 每个人都知道),
      然后把加密过后的文章发送给你的朋友, 你的朋友可以用他的私钥来解密. 其他人获得了你传送的内容都是没有用的, 因为只有你朋友有私钥可以解密.  非对称加密算法的优点是密钥管理很方便, 缺点是速度慢.

    第四节 数字签名(Digital Signature)
      我们先来看看现实生活中的签名是如何实现的. 比如为信用卡账单签名, 商家会打印一张消费单子给你, 你看过以后觉得没有问题, 于是在这张纸上签上自己的大名,
      表示你承认了这笔消费, 并同意商家从你的信用卡账户扣钱. 而商家可以对比你的签名和信用卡背后的签名是否一致来验证你是否冒用别人的信用卡(事实上很多商家不看的哦).
      这个流程是基于一个假设的： 只有你自己能重现你的签名. 虽然我们不能每次都签的一摸一样, 但是通过笔迹鉴定, 我们可以确定这个签名是否出自你手. 分析一下, 签名具有哪些特点呢？
        1. 不可伪造 - 通过笔记鉴定来保证.
        2. 不可移植, 复制 - 复印, 剪贴的签名当然无效咯！
        3. 不可否认 – 因为不可伪造, 不可移植, 不可复制, 所以不可否认.
      相似的, 在虚拟世界里, 我们有数字签名来帮助证明某个文档是你创建的, 或者是你认可的.  数字签名所用的技术是散列和非对称加密. 数字签名的假设是：
      只有你自己有你的私钥. 根据前面对散列的介绍, 我们先为你要签名的信息生成一个 Hash 字串, Hash1, 然后用你的私钥加密得到 Encrypted(Hash1), 这就是你对这个文档的数字签名.
      当别人需要验证某个文档是否是你签名的时候, 只需要用你的公钥解密你的签名得到 Hash1, 并和该文档计算出来的 Hash2 对比, 查看是否一致. 如果一致则说明你确实对该文档签过名, 否则就是没有.
      下面来分析一下, 数字签名是如何保证上面所讲的签名的特点的.
        1. 不可伪造
      因为只有你有你自己的私钥, 所以任何其他人都无法产生用你的私钥加密过的 Hash1.
        2. 不可移植, 复制
      你对文档A的签名不可能对文档B也有效, 因为你对文档B的签名必然和对A的签名不一样, 这是由Hash的唯一性保证的. 拿你对A的签名去验证B是不可能通过的.
        3. 不可否认
      因为不可伪造, 不可移植, 不可复制, 所以不可否认.
      仔细想想数字签名和现实生活中的签名真的蛮像的, 逻辑上是一样的. 或许你在想, 为什么要对Hash加密呢？我直接对文档用我的私钥加密不就完了嘛？对啊, 效果是一样的, 但是效率不一样哦~
      别忘了非对称算法是很慢的, 加密一个100M的文件要算半天呢！

    这里要顺便提一下消息认证码(Message Authentication Code).  它和数字签名很相似, 只不过它是用对称加密的而数字签名用的是非对称加密.


    SSL 原理 >>

    由于 Internet 的架构问题, 信息在网络上传输是很容易被别人获取的, 那如何建立一个安全的传输网络呢？前面我们讨论了很多保证信息安全的技术,
    而 SSL 就是建立在这些技术的基础上的一套协议, 用来保证通信的安全. SSL 全称是 Secure Sockets Layer, 它是一种间于传输层(比如TCP/IP)和应用层(比如 HTTP)的协议.
    具体的 SSL 协议很复杂, 我这里只讲一个大概.

    最简单的方法来保证通信安全是用非对称加密. 我们前面讲过数字证书的认证, 如果双方都认证了对方的数字证书, 那么每次传输信息的时候都用对方的公钥加密,
    这样就只有对方能解密, 从而保证了信息的安全. 但是对于日常应用(比如网页浏览)有两个问题：
      1. 非对称加密速度缓慢, 消耗资源
      如果客户端和服务器之间传输文件用非对称加密的话, 速度一定慢的忍无可忍.
      2. 不可能要求每个用户都去申请数字证书
      申请数字证书是一个相当麻烦的过程, 要求每个上网的用户都拥有证书是不可能的事情.
    SSL 通过"握手协议"和"传输协议"来解决上述问题. 握手协议是基于非对称加密的, 而传输协议是基于对称加密的. 根据不同的应用, SSL 对证书的要求也是不一样的,
    可以是单方认证(比如 HTTP, FTP), 也可以是双方认证(比如网上银行). 通常情况下, 服务器端的证书是一定要具备的, 客户端的证书不是必须的.

    此图是 SSL 握手, 单方服务器认证: http://static.oschina.net/uploads/space/2012/0301/104132_uqRH_28.jpg
    此图是 SSL 握手，双方认证: http://static.oschina.net/uploads/space/2012/0301/104148_Ko9Y_28.jpg

    握手协议可以看成是客户端和服务器协商的一个过程, 结果就是一个对称密钥, 然后就进入了传输协议的部分. 也许, 你在想, "现在还不简单吗？用这个对称密钥加密传输数据呗！".
    否, 没那么简单. 先来看一下结果, 等会儿再解释原因. 在通信双方协商出一个对称密钥以后, 他们用这个密钥来加密传输的数据. 同时为每个消息生成时间戳,
    用此密钥为消息和相应的时间戳生成消息认证码(MAC). 也就是说, 每次发送的内容包括 Encrypt(message) + MAC(message + timestamp)
    这么做有几个好处：
      1. 防止消息的篡改
      所谓消息篡改就是有第三者插在通信双方之间, 篡改往来的消息. 由于消息是加密的, 第三者不能获得消息的内容, 但是他可以闭着眼睛瞎改. 如果没有MAC的话, 接受者就无法判断此消息是否被篡改过.
      2. 防止消息重放
      消息的重放是只第三者记录下通信双方的每一次发送的消息, 虽然他不能获得消息的内容. 但是它可以通过重新发送客户端或者服务端的信息来把自己装成是客户端或者服务端.
      如果在 MAC 里面加上了时间戳, 消息接收方验证时间戳就可以阻止消息的重放攻击.

    SSL 的基本思想是用非对称加密来建立链接(握手阶段), 用对称加密来传输数据(传输阶段). 这样既保证了密钥分发的安全, 也保证了通信的效率.

    通过上面对SSL的分析, 我们可以看到, SSL 并不能阻止别人获得你传输的数据, 但是由于你传输的数据都是加密过的, 别人拿到了毫无用处, 一样可以保护信息的安全.
    还有一点需要强调一下, SSL 并不依赖于 TCP, 它可以建立在任何可靠的传输层协议(比如TCP)之上.
    也就是说 SSL 是不能建立在 UDP 之上的. 这是显然的, 如果传输都不可靠, 偶尔丢两个包或者包的顺序换一换的话, 怎么保证安全呢？


  讲了一堆听不懂的术语之后, 要怎么用?
  3. 配置

    这个页面有相关的各种服务器安装步骤(多亲民的链接地址):
      http://verisign.itrus.com.cn/html/fuwuyuzhichi/fuwuqizhengshuanzhuangpeizhizhinan/

    首先, 我们要确定 SSL 证书应该配在什么地方?

    如果是 tomcat, 使用 jdk 目录的 keytool 及密码生成相应的 jks 文件. 然后再生成证书提交文件 csr(依次给定相应值), 将此 csr 提交给 CA(证书颁发机构),
    后者会返回 cer 文件, 再次使用 keytool 命令将 cer 信息回写进 jks, 用此 jsk 配置好 tomcat(端口路径生成时的密码) 重启即可支持 https.

    如果是 apache, 则需要 openssl 支持.
      #> openssl genrsa -des3 -out login.yijushang.com.key 2048 生成 key 文件
      #> openssl req -new -key login.yijushang.com.key -out login.yijushang.com.csr -config "/openssl.cnf" 生成 csr 文件.
      将此 csr 提交后者会返回 crt 文件.

      #> openssl rsa -in login.yijushang.com.key -out login.yijushang.com-new.key 输入密码则可以生成新的 key 文件, 它能够保证 apache 启动时不需要输入密码

    在 ...ssl.conf 中配置好重启, 即可支持 https.

    以下地址可以检查生成的 csr 文件: https://www.wosign.com/support/check_csr.htm


  4. 备份
    对于 tomcat 来说, 需要备份的是后被回写的 jks 文件及生成时的密码.
    对于 apache 来说, 需要备份返回的 crt 文件和最初生成的 key 文件, 及生成 key 时的密码.


>> 以下是 openssl 生成 login.yijushang.com 请求证书时的相关命令及输入的值

;; 生成 key
#> openssl genrsa -des3 -out login.yijushang.com.key 2048
Loading 'screen' into random state - done
Generating RSA private key, 2048 bit long modulus
...
e is 65537 (0x10001)
Enter pass phrase for login.yijushang.com.key: krqEjs_$RE#

;; 生成 csr
#> openssl req -new -key login.yijushang.com.key -out login.yijushang.com.csr -config "./openssl.cnf"
Enter pass phrase for login.yijushang.com.key: krqEjs_$RE#
...
Country Name (2 letter code) [AU]:CN
State or Province Name (full name) [Some-State]:GuangDong
Locality Name (eg, city) []:ShenZhen
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Kariqu
Organizational Unit Name (eg, section) []:yijushang
Common Name (e.g. server FQDN or YOUR name) []:login.yijushang.com
Email Address []:

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:

;; 生成不需要密码的 key
#> openssl rsa -in login.yijushang.com.key -out login.yijushang.com-new.key
Enter pass phrase for login.yijushang.com.key: krqEjs_$RE#
writing RSA key
