MySQL 5.1简体中文官方手册：http://dev.mysql.com/doc/refman/5.1/zh/column-types.html#char

字符集：CHARSET=utf8 可以在单独的列上指定字符集

MySQL支持多种列类型：数值类型、日期/时间类型和字符串(字符)类型。
数值类型描述惯例：
         标识符名称   含义
          M           表示最大显示宽度。最大有效显示宽度是255，显示宽度与存储大小或类型包含的值的范围无关。
          D           适用于浮点和定点类型，并表示小数点后面的位数。最大可能的值是30，但不应大于M–2
          方括号(‘[’和‘]’)  表示可选部分

一、Mysql数据类型详解：

1、数值类型：
     整数：TINYINT、SMALLINT、MEDIUMINT、INT或INTEGER、BIGINT
     小数：FLOAT、DOUBLE、DECIMAL

     类型                                      大小      范围(有符号)               范围(无符号)       描述
     TINYINT[(M)][(M)] [UNSIGNED] [ZEROFILL]   1个字节   [-128，127]                [0，255]           很小的整数
     SMALLINT[(M)] [UNSIGNED] [ZEROFILL]       2个字节   [-32768，32767]            [0，65535]         小的整数
     MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]      3个字节   [-8388608，8388607]        [0，16777215]      中等大小的整数
     INT,INTEGER[(M)] [UNSIGNED] [ZEROFILL]    4个字节   [-2147483648，2147483647]  [0，4294967295]    普通大小的整数
     BIGINT[(M)] [UNSIGNED] [ZEROFILL]         8个字节   [-9223372036854775808，9223372036854775807]  [0，18446744073709551615]  大整数

     FLOAT[(M,D)] [UNSIGNED] [ZEROFILL]        4个字节   [-3.402823466E+38, -1.175494351E-38] [0和1.175494351E-38，3.402823466E+38]  小(单精度)浮点数。M是小数总位数，D是小数点后面的位数。如果M和D被省略，根据硬件允许的限制来保存值。单精度浮点数精确到大约7位小数位。
     DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]       8个字节   [-1.7976931348623157E+308, -2.2250738585072014E-308] [0和2.2250738585072014E-308， 1.7976931348623157E+308]  普通大小(双精度)浮点数，双精度浮点数精确到大约15位小数位。                                双精度浮点数值  java.lang.Double
     DECIMAL[(M[,D])] [UNSIGNED] [ZEROFILL]    8个字节   压缩的“严格”定点数。M是小数位数(精度)的总数，D是小数点(标度)后面的位数。小数点和(负数)的‘-’符号不包括在M中。如果D是0，则值没有小数点或分数部分。DECIMAL整数最大位数(M)为65。支持的十进制数的最大位数(D)是30。如果D被省略， 默认是0。如果M被省略， 默认是10。
     BIT[(M)]                           大约(M+7)/8个字节    位字段类型  M表示每个值的位数，范围为从1到64。如果M被省略， 默认为1

     BIT数据类型可用来保存位字段值。BIT(M)类型允许存储M位值。M范围为1到64。
     如果为BIT(M)列分配的值的长度小于M位，在值的左边用0填充。例如，为BIT(6)列分配一个值b'101'，其效果与分配b'000101'相同。

     INT 类型
     　　MySQL 以一个可选的显示宽度指示器的形式对 SQL 标准进行扩展，这样当从数据库检索一个值时，可以把这个值加长到指定的长度。例如，指定一个字段的类型为 INT(6)，就可以保证所包含数字少于 6 个的值从数据库中检索出来时能够自动地用空格填充。需要注意的是，使用一个宽度指示器不会影响字段的大小和它可以存储的值的范围。
     　　万一我们需要对一个字段存储一个超出许可范围的数字，MySQL 会根据允许范围最接近它的一端截短后再进行存储。还有一个比较特别的地方是，MySQL 会在不合规定的值插入表前自动修改为 0。
         如果INT列是UNSIGNED，列范围的大小相同，但其端点会变为到0和4294967295。如果你试图保存-9999999999和9999999999，以非严格模式保存到列中的值是0和4294967296。

     FLOAT、DOUBLE 和 DECIMAL 类型
     　　与整数一样，这些类型也带有附加参数：一个显示宽度指示器和一个小数点指示器。比如语句 FLOAT(7,3) 规定显示的值不会超过 7 位数字，小数点后面带有 3 位数字。
     　　对于小数点后面的位数超过允许范围的值，MySQL 会自动将它四舍五入为最接近它的值，再插入它。
     　　DECIMAL 数据类型用于精度要求非常高的计算中，这种类型允许指定数值的精度和计数方法作为选择参数。精度在这里指为这个值保存的有效数字的总个数，而计数方法表示小数点后数字的位数。比如语句 DECIMAL(7,3) 规定了存储的值不会超过 7 位数字，并且小数点后不超过 3 位。
     　　忽略 DECIMAL 数据类型的精度和计数方法修饰符将会使 MySQL 数据库把所有标识为这个数据类型的字段精度设置为 10，计算方法设置为 0。
     　　UNSIGNED 和 ZEROFILL 修饰符也可以被 FLOAT、DOUBLE 和 DECIMAL 数据类型使用。并且效果与 INT 数据类型相同。

         DECIMAL和NUMERIC 比较适合用于“价格”、“金额”这样对精度要求不高但准确度要求非常高的字段。

         MySQL保存值时进行四舍五入，因此如果在FLOAT(7,4)列内插入999.00009，近似结果是999.0001。


         UNSIGNED 修饰符规定字段只保存正值。只能针对整型，用次类型可以增加数据长度。如tinyint最大是127，那tinyint UNSIGNED可以达到127*2。
         ZEROFILL 修饰符规定 0（不是空格）可以用来填补输出的值。使用这个修饰符可以阻止 MySQL 数据库存储负值。
         注意，如果为一个数值列指定ZEROFILL，MySQL自动为该列添加UNSIGNED属性。
               两个UNSIGNED的字段相减，值还是UNSIGNED，这就意味着如果用3-5的话，最后得到的结果肯定不是-2 而是一个溢出的超大整数，注意安全。

         那这个int[M]中M是什么意义呢，在定义数值型数据类型的时候，可以在关键字括号内指定整数值（如：int(M)，M的最大值为255）显示最大显示宽度，显示宽度M与数据所占用空间、数值的范围无关。
         如果在定义字段的时候指定zerofill，那么当数值的显示宽度小于指定的列宽度时候，则默认补充的空格用0代替。比如你的类型是INT(4),你插入了3，数据库里保存的是0003。

         *** 警告：应当清楚，当使用在整数值（其中一个是UNSIGNED类型）之间使用减号时，结果是无符号。


I、Mysql类型反向映射Java类型：
    Mysql字段类型与Java类型对应表：  http://dev.mysql.com/doc/refman/5.0/en/connector-j-reference-type-conversions.html
    ——————————————————————————————————————————————
    MySQL Type Name                       Return value of                     Java Class
                                          GetColumnClassName
    ——————————————————————————————————————————————
    BIT(1) (new in MySQL-5.0)	           BIT                                java.lang.Boolean
    BIT( > 1) (new in MySQL-5.0)	       BIT                                byte[]
    TINYINT	                               TINYINT                            java.lang.Boolean if the configuration property tinyInt1isBit is set to true (the default) and the storage size is 1, or java.lang.Integer if not.
    BOOL,BOOLEAN	                	   TINYINT                            java.lang.Boolean
    SMALLINT[(M)] [UNSIGNED]	           SMALLINT [UNSIGNED]                java.lang.Integer
    MEDIUMINT[(M)] [UNSIGNED]	           MEDIUMINT [UNSIGNED]               java.lang.Integer
    INT,INTEGER[(M)] [UNSIGNED]	           INTEGER [UNSIGNED]                 java.lang.Integer, if UNSIGNED java.lang.Long
    BIGINT[(M)] [UNSIGNED]	               BIGINT [UNSIGNED]                  java.lang.Long, if UNSIGNED java.math.BigInteger
    FLOAT[(M,D)]	                       FLOAT                              java.lang.Float
    DOUBLE[(M,B)]	                       DOUBLE                             java.lang.Double
    DECIMAL[(M[,D])]	                   DECIMAL                            java.math.BigDecimal
    DATE	                               DATE                               java.sql.Date
    DATETIME	                           DATETIME                           java.sql.Timestamp
    TIMESTAMP[(M)]                         TIMESTAMP                          java.sql.Timestamp
    TIME	                               TIME                               java.sql.Time
    YEAR[(2|4)]		                       YEAR                               If yearIsDateType configuration property is set to false, then the returned object type is java.lang.Short. If set to true (the default), then the returned object is of type java.sql.Date with the date set to January 1st, at midnight.
    CHAR(M)	 	                           CHAR                               java.lang.String (unless the character set for the column is BINARY, then byte[] is returned.)
    VARCHAR(M)                             VARCHAR                            java.lang.String (unless the character set for the column is BINARY, then byte[] is returned.)
    BINARY(M)	                           BINARY                             byte[]
    VARBINARY(M)	                       VARBINARY                          byte[]
    TINYBLOB	                           TINYBLOB                           byte[]
    TINYTEXT                               VARCHAR                            java.lang.String
    BLOB                                   BLOB                               byte[]
    TEXT	                               VARCHAR                            java.lang.String
    MEDIUMBLOB                             MEDIUMBLOB                         byte[]
    MEDIUMTEXT                             VARCHAR                            java.lang.String
    LONGBLOB	                           LONGBLOB                           byte[]
    LONGTEXT	                           VARCHAR                            java.lang.String
    ENUM('value1','value2',...)	           CHAR                               java.lang.String
    SET('value1','value2',...)             CHAR                               java.lang.String

    BIT  (对于boolean类型，在mysql数据库中，个人认为用int类型代替较好，对bit操作不是很方便，尤其是在具有web页面开发的项目中，表示0/1，对应java类型的Integer较好。)

    ————————————————————————————————————————————————|———————————————————————————————————————————————————————
    |These MySQL Data Types	                                                                        |  Can always be converted to these Java types                                                                 |
    |——————————————————————————————————————————————— |———————————————————————————————————————————————————————
    |CHAR, VARCHAR, BLOB, TEXT, ENUM, and SET	                                                    |  java.lang.String, java.io.InputStream, java.io.Reader, java.sql.Blob, java.sql.Clob                         |
    |——————————————————————————————————————————————— |———————————————————————————————————————————————————————
    |FLOAT, REAL, DOUBLE PRECISION, NUMERIC, DECIMAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT |  java.lang.String, java.lang.Short, java.lang.Integer, java.lang.Long, java.lang.Double, java.math.BigDecimal|
    |——————————————————————————————————————————————— |———————————————————————————————————————————————————————
    |DATE, TIME, DATETIME, TIMESTAMP	                                                            |  java.lang.String, java.sql.Date, java.sql.Timestamp                                                         |
    ————————————————————————————————————————————————|———————————————————————————————————————————————————————

II、Java类型反向对应Mysql类型
    Java类型                Mysql类型

    byte                    TINYINT
    byte[]                  BIT( > 1)、BINARY(M)、VARBINARY(M)、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB
    boolean                 BIT(1)、TINYINT(1)、BOOL,BOOLEAN
    char                    CHAR
    short                   SMALLINT
    int                     MEDIUMINT、INT,INTEGER
    long                    BIGINT
    float                   FLOAT
    double                  DOUBLE
    String                  VARCHAR、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT、ENUM、SET
    java.sql.Date           DATE、DATETIME、TIMESTAMP
    java.sql.Time           TIME
    java.sql.Timestamp      DATETIME、TIMESTAMP
    java.util.Date          DATE、TIME、DATETIME、TIMESTAMP
    java.math.BigDecimal    DECIMAL
    java.math.BigInteger    BIGINT



2、布尔型：
    BOOL，BOOLEAN在MYSQL中是TINYINT(1)的同义词。zero值被视为假。非zero值视为真。


3、字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET
   （字符串类型：CHAR、VARCHAR、TINYBLOB、TINYTEXT、BLOB、TEXT、MEDIUMBLOB、MEDIUMTEXT、LOGNGBLOB、LONGTEXT）
     类型       大小             描述
     CHAR(M)    0-255字节        定长字符串                           最大长度为255个字符，最多能存255个中文或英文字母              固定长度字符串，当保存时在右侧填充空格以达到指定的长度。M表示列长度。M的范围是0到255个字符。注释：当检索CHAR值时尾部空格被删除。
     VARCHAR(M) 0-65535字节      可变长字符串                         最大有效长度为65532个字节，最多能存21844个中文或英文字母      变长字符串。VARCHAR保存时用一个字节或两个字节长的前缀+数据。如果VARCHAR列声明的长度大于255，长度前缀是两个字节。 M 表示最大列长度。M的范围是0到65,535。(VARCHAR的最大实际长度由最长的行的大小和使用的字符集确定。最大有效长度是65,532字节）。 注释：MySQL 5.1遵从标准SQL规范，并且不删除VARCHAR值的尾部空格。
     TINYBLOB   0-255字节        不超过 255 个字符的二进制字符串      最大长度为255 (2^8–1)字节的BLOB列。
     TINYTEXT   0-255字节        短文本字符串                         最大长度为255(2^8–1)字符的TEXT列。 85个汉字 、 255个英文字母
     BLOB[(M)]  0-65535字节      二进制形式的长文本数据               最大长度为65,535(2^16–1)字节的BLOB列
     TEXT[(M)]  0-65535字节      长文本数据                           最大长度为65,535(2^16–1)字符的TEXT列，最多能存21845个汉字、65535个英文字母     可以给出可选长度M。则MySQL将列创建为最小的但足以容纳M字符长的值的TEXT类型。
     MEDIUMBLOB 0-16777215字节   二进制形式的中等长度文本数据         最大长度为16777215 (2^24-1)个字节
     MEDIUMTEXT 0-16777215字节   中等长度文本数据                     最大长度为16777215 (2^24-1)个字符
     LONGBLOB   0-4294967295字节 二进制形式的极大文本数据             最大长度为4,294,967,295或4GB(232–1)字节的BLOB列     LONGBLOB列的最大有效(允许的)长度取决于客户端/服务器协议中配置最大包大小和可用的内存。
     LONGTEXT   0-4294967295字节 极大文本数据                         最大长度为4,294,967,295或4GB(232–1)字符的TEXT列     LONGTEXT列的最大有效(允许的)长度取决于客户端/服务器协议中配置最大包大小和可用的内存。

MySQL 5.1字符串数据类型包括部分在MySQL 4.1之前的版本中没有的特性：
·         许多字符串数据类型的列定义可以包括指定字符集的CHARACTER SET属性，也可能包括校对规则。(CHARSET是CHARACTER SET的一个同义词）。这些属性适用于CHAR、VARCHAR、TEXT类型、ENUM和SET。例如：
·                CREATE TABLE t
·                (
·                    c1 CHAR(20) CHARACTER SET utf8,
·                    c2 CHAR(20) CHARACTER SET latin1 COLLATE latin1_bin
·                );
该表定义创建了一个名为c1的列，具有一个utf8字符集和该字符集的默认 校对规则，和一个名为c2的列以及latin1字符集和该字符集的二元 校对规则。二元校对规则对大小写不敏感。

·         MySQL 5.1用字符单位解释在字符列定义中的长度规范。(以前的一些MySQL版本以字节解释长度）。

·         对于CHAR、VARCHAR和TEXT类型，BINARY属性可以为列分配该列字符集的 校对规则。  BINARY属性是指定列字符集的二元 校对规则的简写。排序和比较基于数值字符值。
·         字符列的排序和比较基于分配给列的字符集。在以前的版本中，排序和比较基于服务器字符集的校对规则。对于CHAR和VARCHAR 列，你可以用BINARY属性声明列让排序和 校对规则使用当前的字符代码值而不是词汇顺序。




MySQL数据库中varchar的限制规则:

1、限制规则
  　　字段的限制在字段定义的时候有以下规则：

  　　a）存储限制
  　　varchar字段是将实际内容单独存储在聚簇索引之外，内容开头用1到2个字节表示实际长度（长度超过255时需要2个字节），因此最大长度不能超过65535。

  　　b）编码长度限制
  　　字符类型若为gbk，每个字符最多占2个字节，最大长度不能超过32766;
  　　字符类型若为utf8，每个字符最多占3个字节，最大长度不能超过21845。

  　　若定义的时候超过上述限制，则varchar字段会被强行转为text类型，并产生warning。

  　　c）行长度限制
  　　导致实际应用中varchar长度限制的是一个行定义的长度。MySQL要求一个行的定义长度不能超过65535。若定义的表长度超过这个值，则提示ERROR1118(42000):Rowsizetoolarge.Themaximumrowsizefortheusedtabletype,notcountingBLOBs,is65535.YouhavetochangesomecolumnstoTEXTorBLOBs。

2、计算例子
　　举两个例子说明一下实际长度的计算。
　　a）若一个表只有一个varchar类型，如定义为createtablet4(c varchar(N))charset=gbk;则此处N的最大值为(65535-1-2)/2=32766。
    　　减1的原因是实际行存储从第二个字节开始’;
    　　减2的原因是varchar头部的2个字节表示长度;
    　　除2的原因是字符编码是gbk。

　　b）若一个表定义为createtablet4(c int,c2 char(30),c3 varchar(N))charset=utf8;则此处N的最大值为(65535-1-2-4-30*3)/3=21812。
    　　减1和减2的原因与上例相同;
    　　减4的原因是int类型的c占4个字节;
    　　减30*3的原因是char(30)占用90个字节，编码是utf8。
　　如果varchar超过上述的b规则，被强制转成text类型，则每个字段占用定义长度为11字节，当然这已经不是“varchar”了。


     CHAR 和 VARCHAR 类型
         CHAR和VARCHAR类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。
         CHAR和VARCHAR类型声明的长度表示你想要保存的最大字符数。例如，CHAR(30)可以占用30个字符。
         CHAR列的长度固定为创建表时声明的长度。长度可以为从0到255的任何值。当保存CHAR值时，在它们的右边填充空格以达到指定的长度。当检索到CHAR值时，尾部的空格被删除掉。在存储或检索过程中不进行大小写转换。
         VARCHAR列中的值为可变长字符串。长度可以指定为0到65,535之间的值。(VARCHAR的最大有效长度由最大行大小和使用的字符集确定。整体最大长度是65,532字节）。
         同CHAR对比，VARCHAR值保存时只保存需要的字符数，另加一个字节来记录长度(如果列声明的长度超过255，则使用两个字节)。
         VARCHAR值保存时不进行填充。当值保存和检索时尾部的空格仍保留，符合标准SQL。
         如果分配给CHAR或VARCHAR列的值超过列的最大长度，则对值进行裁剪以使其适合。如果被裁掉的字符不是空格，则会产生一条警告。如果裁剪非空格字符，则会造成错误(而不是警告)并通过使用严格SQL模式禁用值的插入

         下面的表显示了将各种字符串值保存到CHAR(4)和VARCHAR(4)列后的结果，说明了CHAR和VARCHAR之间的差别：
         ——————|—————|——————|——————|—————
         |值         |  CHAR(4) |  存储需求  |  VARCHAR(4)|  存储需求|
         ——————|—————|——————|——————|—————
         |''         |  '    '  |   4个字节  |   ''       |   1个字节|
         |'ab'       |  'ab  '  |   4个字节  |   'ab '    |   3个字节|
         |'abcd'     |  'abcd'  |   4个字节  |   'abcd'   |   5个字节|
         |'abcdefgh' |  'abcd'  |   4个字节  |   'abcd'   |   5个字节|
          —————————————————————————————
         请注意上表中最后一行的值只适用不使用严格模式时；如果MySQL运行在严格模式，超过列长度不的值不保存，并且会出现错误。

     BINARY和VARBINARY类型
          BINARY和VARBINARY类类似于CHAR和VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。

     BLOB和TEXT类型
         BLOB是一个二进制大对象，可以容纳可变数量的数据。有4种BLOB类型：TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB。它们只是可容纳值的最大长度不同。
         有4种TEXT类型：TINYTEXT、TEXT、MEDIUMTEXT和LONGTEXT。这些对应4种BLOB类型，有相同的最大长度和存储需求。
         BLOB 列被视为二进制字符串(字节字符串)。
         TEXT列被视为非二进制字符串(字符字符串)。
         BLOB列没有字符集，并且排序和比较基于列值字节的数值值。
         TEXT列有一个字符集，并且根据字符集的 校对规则对值进行排序和比较。
         在TEXT或BLOB列的存储或检索过程中，不存在大小写转换。


4、日期和时间类型：DATE、TIME、YEAR、DATETIME、TIMESTAMP

     类型      大小(字节)       范围                                  格式                 用途                      描述
     DATE          3         '1000-01-01'/'9999-12-31'                YYYY-MM-DD           日期值                    日期。MySQL以'YYYY-MM-DD'格式显示DATE值，但允许使用字符串或数字为DATE列分配值。
     TIME          3         '-838:59:59'/'838:59:59'                 HH:MM:SS             时间值或持续时间          时间。MySQL以'HH:MM:SS'格式显示TIME值，但允许使用字符串或数字为TIME列分配值。
     YEAR[(2|4)]   1         1901/2155                                YYYY                 年份值                    两位或四位格式的年。默认是四位格式。在四位格式中，允许的值是1901到2155和0000。在两位格式中，允许的值是70到69，表示从1970年到2069年。MySQL以YYYY 格式显示YEAR值，但允许使用字符串或数字为YEAR列分配值。
     DATETIME      8         '1000-01-01 00:00:00'/'9999-12-31 23:59:59'  YYYY-MM-DD HH:MM:SS  混合日期和时间值      日期和时间的组合。MySQL以'YYYY-MM-DD HH:MM:SS'格式显示DATETIME值，但允许使用字符串或数字为DATETIME列分配值。
     TIMESTAMP[(M)] 4        '1970-01-01 00:00:00'/2037年               YYYYMMDD HHMMSS      时间戳                  TIMESTAMP列用于INSERT或UPDATE操作时记录日期和时间。如果你不分配一个值，表中的第一个TIMESTAMP列自动设置为最近操作的日期和时间。也可以通过分配一个NULL值，将TIMESTAMP列设置为当前的日期和时间。TIMESTAMP值返回后显示为'YYYY-MM-DD HH:MM:SS'格式的字符串，显示宽度固定为19个字符。如果想要获得数字值，应在TIMESTAMP 列添加+0。

     日期和时间类型是DATETIME、DATE、TIMESTAMP、TIME和YEAR。这些的每一个都有合法值的一个范围，而“零”当你指定确实不合法的值时被使用。
     MySQL只验证月范围为从0到12，日范围为从0到31。

     DATE、TIME 和 YEAR 类型
         当你只需要日期值而不需要时间部分时应使用DATE类型。MySQL用'YYYY-MM-DD'格式检索和显示DATE值。支持的范围是'1000-01-01'到 '9999-12-31'。
     　　MySQL 用 DATE 和 YEAR 类型存储简单的日期值，使用 TIME 类型存储时间值。这些类型可以描述为字符串或不带分隔符的整数序列。如果描述为字符串，DATE 类型的值应该使用连字号作为分隔符分开，而 TIME 类型的值应该使用冒号作为分隔符分开。
     　　需要注意的是，没有冒号分隔符的 TIME 类型值，将会被 MySQL 理解为持续的时间，而不是时间戳。
     　　MySQL 还对日期的年份中的两个数字的值，或是 SQL 语句中为 YEAR 类型输入的两个数字进行最大限度的通译。因为所有 YEAR 类型的值必须用 4 个数字存储。MySQL 试图将 2 个数字的年份转换为 4 个数字的值。把在 00-69 范围内的值转换到 2000-2069 范围内。把 70-99 范围内的值转换到 1970-1979 之内。如果 MySQL 自动转换后的值并不符合我们的需要，请输入 4 个数字表示的年份。

         MySQL以'HH:MM:SS'格式检索和显示TIME值(或对于大的小时值采用'HHH:MM:SS'格式)。TIME值的范围可以从'-838:59:59'到'838:59:59'。小时部分会因此大的原因是TIME类型不仅可以用于表示一天的时间(必须小于24小时)，还可能为某个事件过去的时间或两个事件之间的时间间隔(可以大于24小时，或者甚至为负)。

     DATETIME 和 TIMESTAMP 类型
         使用DATETIME类型，MySQL以'YYYY-MM-DD HH:MM:SS'格式检索和显示DATETIME值。支持的范围为'1000-01-01 00:00:00'到'9999-12-31 23:59:59'。(“支持”表示尽管先前的值可能工作，但没有保证)。

     　　除了日期和时间数据类型，MySQL 还支持 DATETIME 和 TIMESTAMP 这两种混合类型。它们可以把日期和时间作为单个的值进行存储。这两种类型通常用于自动存储包含当前日期和时间的时间戳，并可在需要执行大量数据库事务和需要建立一个调试和审查用途的审计跟踪的应用程序中发挥良好作用。
     　　如果我们对 TIMESTAMP 类型的字段没有明确赋值，或是被赋与了 null 值。MySQL 会自动使用系统当前的日期和时间来填充它。
         TIMESTAMP列类型的属性不固定，取决于MySQL版本和服务器运行的SQL模式。

        记住尽管可以使用相同的格式指定DATETIME、DATE和TIMESTAMP值，不同类型的值的范围却不同。例如，TIMESTAMP值不能早于1970或晚于2037。这说明一个日期，例如'1968-01-01'，虽然对于DATETIME或DATE值是有效的，但对于TIMESTAMP值却无效，如果分配给这样一个对象将被转换为0。
        无效DATETIME、DATE或者TIMESTAMP值被转换为相应类型的“零”值('0000-00-00 00:00:00'、'0000-00-00'或者00000000000000)。

5、复合类型：ENUM、SET
     MySQL 还支持两种复合数据类型 ENUM 和 SET，它们扩展了 SQL 规范。虽然这些类型在技术上是字符串类型，但是可以被视为不同的数据类型。一个 ENUM 类型只允许从一个集合中取得一个值；而 SET 类型允许从一个集合中取得任意多个值。

     ENUM 类型
     　　ENUM 类型因为只允许在集合中取得一个值，有点类似于单选项。在处理相互排拆的数据时容易让人理解，比如人类的性别。ENUM 类型字段可以从集合中取得一个值或使用 null 值，除此之外的输入将会使 MySQL 在这个字段中插入一个空字符串。另外如果插入值的大小写与集合中值的大小写不匹配，MySQL 会自动使用插入值的大小写转换成与集合中大小写一致的值。
     　　 ENUM 类型在系统内部可以存储为数字，并且从 1 开始用数字做索引。一个 ENUM 类型最多可以包含 65536 个元素，其中一个元素被 MySQL 保留，用来存储错误信息，这个错误值用索引 0 或者一个空字符串表示。
     　　MySQL 认为 ENUM 类型集合中出现的值是合法输入，除此之外其它任何输入都将失败。这说明通过搜索包含空字符串或对应数字索引为 0 的行就可以很容易地找到错误记录的位置。

     SET 类型
     　　SET 类型与 ENUM 类型相似但不相同。SET 类型可以从预定义的集合中取得任意数量的值。并且与 ENUM 类型相同的是任何试图在 SET 类型字段中插入非预定义的值都会使 MySQL 插入一个空字符串。如果插入一个即有合法的元素又有非法的元素的记录，MySQL 将会保留合法的元素，除去非法的元素。
     　　一个 SET 类型最多可以包含 64 项元素(最多64个字符串对象)。在 SET 元素中值被存储为一个分离的“位”序列，这些“位”表示与它相对应的元素。“位”是创建有序元素集合的一种简单而有效的方式。并且它还去除了重复的元素，所以 SET 类型中不可能包含两个相同的元素。
     　　希望从 SET 类型字段中找出非法的记录只需查找包含空字符串或二进制值为 0 的行。


二、 Mysql存储二进制文件
     注意两点：1、mysql存储大容量的二进制文件的格式是BLOB、MEDIUMBLOB、LOGNGBLOB
               2、要向数据库存储二进制的文件一定要把要存储的数据转换成二进制流
     关键代码：
        File file = new File("D:\\blog.jpg");  // 首先把一个图片文件(当然也可以是别的什么文件)转换成了一个二进制输入流
        InputStream photoStream = new FileInputStream(file);

        String sql = "INSERT INTO image (img) VALUES (?)";
        pst = conn.prepareStatement(sql);
        pst.setBinaryStream(1, photoStream, (int) file.length()); // 第三个参数表示流的长度
        pst.executeUpdate();



 三、日期和时间函数
     CURDATE()、CURRENT_DATE(); 返回当前日期
     CURTIME()、CURRENT_TIME(); 返回当前时间
     NOW() 返回当前时期和时间
     WEEK(date) 返回日期date为一年中的第几周
     YEAR(date) 返回date的年份，范围在1000到9999
     HOUR(time) 返回time的小时值，范围是0到23
     MINUTE(TIME) 返回time的分钟，范围是0到59
     SECOND(time) 返回time的秒数，范围是0到59。
     MONTH(date) 返回date的月份，范围1到12
     MONTHNAME(date) 返回date的月份名
     QUARTER(date) 返回date一年中的季度，范围1到4
     DATE_FORMAT(data, fmt) 返回按字符串fmt格式化后的date值
     DATEDIFF(expr,expr2) 返回起始时间expr和结束时间expr2之间的天数
     DAYOFWEEK(date) 返回日期date的星期索引(1=星期天，2=星期一, ……7=星期六)
     WEEKDAY(date) 返回date的星期索引(0=星期一，1=星期二, ……6= 星期天)
     DAYOFMONTH(date) 返回date的月份中日期，在1到31范围内
     DAYOFYEAR(date) 返回date在一年中的日数, 在1到366范围内

     PERIOD_ADD(P,N) 增加N个月到阶段P（以格式YYMM或YYYYMM)。以格式YYYYMM返回值。注意阶段参数P不是日期值。
     mysql> select PERIOD_ADD(9801,2);      --> 199803


     注意：
     日期在数据库中是可以直接进行比较的
     对查询语句中的日期进行格式化，将不会使用到索引，所以最好不要在查询中对列进行各种各样的格式化处理。

     1、MySQL 日期跟时间函数的存储内容
        DATETIME YYYY-MM-DD HH:MM:SS
        DATE YYYY-MM-DD
        TIMESTAMP YYYYMMDDHHSSMM
        TIME HH:MM:SS
        YEAR YYYY

        TIMESTAMP 栏存储了所有的14 个字符，但是你其实可以自己定义他的显示方式。例如如果你按照TIMESTAMP(2)的方式来定义，那么只会显示出2 位表示的年份，但是所有的数据仍然是被
        保存的。如果日后你想要列出所有的数据的时候，你只需要改变下限定条件，所有的内容就会显现出来。
        TIMESTAMP(14) YYYYMMDDHHMMSS
        TIMESTAMP(12) YYMMDDHHMMSS
        TIMESTAMP(10) YYMMDDHHMM
        TIMESTAMP(8) YYYYMMDD
        TIMESTAMP(6) YYMMDD
        TIMESTAMP(4) YYMM
        TIMESTAMP(2) YY

        简单的日期计算：
        SELECT YEAR('2003-03-31');     -- 2003
        SELECT YEAR('2003-03-31') + 5; -- 2008
        SELECT YEAR('2003-03-31') - 5; -- 1998




     2、返回日期和时间范围：
        希望取出某个特定时间的数据：
         CREATE TABLE weblog
          (
            data float,
            entrydate datetime
         );
         INSERT weblog VALUES(rand(),now()); -- rand()函数返回一个随机的浮点值，now()函数返回当前时间。
         INSERT weblog VALUES(rand(),”2001-02-08”);
         然后得到表数据是：
         select * from weblog;
         +-----------+---------------------+
         | data      | entrydate           |
         +-----------+---------------------+
         |  0.973723 | 2001-02-08 00:00:00 |
         |  0.437768 | 2001-02-08 13:57:06 |
         |  0.198805 | 2001-02-08 13:57:54 |
         +-----------+---------------------+
         如果你想要2001年2月08日这一天的数据：SELECT * FROM weblog WHERE entrydate="2001-02-08"
         不要这样做。这个SELECT语句不会返回正确的记录――它将只返回值为2000-02-08 00:00:00的记录，换句话说，只返回当天零点零时的记录。上面语句的结果为：
         +----------+---------------------+
         | data     | entrydate           |
         +----------+---------------------+
         | 0.973723 | 2001-02-08 00:00:00 |
         +----------+---------------------+

         要返回正确的记录，你需要适用日期和时间范围。有两种方式：
         1、使用关系运算符和逻辑运算符来限制时间范围
         SELECT * FROM weblog WHERE　entrydate>="2001-02-08" AND entrydate<"2001-02-09" ;
         这个语句选取的是表中的日期和时间大于等于2001-02-08 00:00:00并小于2001-02-09 00:00:00的记录。换句话说，它将正确地返回2000年2月8日这一天输入的每一条记录。 其结果为：
         +-----------+---------------------+
         | data      | entrydate           |
         +-----------+---------------------+
         |  0.973723 | 2001-02-08 00:00:00 |
         |  0.437768 | 2001-02-08 13:57:06 |
         |  0.198805 | 2001-02-08 13:57:54 |
         +-----------+---------------------+

         2、另一种方法是，你可以使用LIKE来返回正确的记录。通过在日期表达式中包含通配符“％”，你可以匹配一个特定日期的所有时间。
         SELECT * FROM weblog WHERE entrydate LIKE '2001-02-08%';
         这个语句可以匹配正确的记录。因为通配符“％”代表了任何时间。
         +-----------+---------------------+
         | data      | entrydate           |
         +-----------+---------------------+
         |  0.973723 | 2001-02-08 00:00:00 |
         |  0.437768 | 2001-02-08 13:57:06 |
         |  0.198805 | 2001-02-08 13:57:54 |
         +-----------+---------------------+

         上面两种方式的区别：
         A、使用关系运算符进行的是比较过程，是转换成内部的存储格式后进行的，因此时间的书写可以不是那么严格要求。
            下面这几种方式都是等价的：
            SELECT * FROM weblog WHERE entrydate>="2001-02-08";
            SELECT * FROM weblog WHERE entrydate>="2001-2-8";
            SELECT * FROM weblog WHERE entrydate>="2001*02*08";
            SELECT * FROM weblog WHERE entrydate>="20010208";
            SELECT * FROM weblog WHERE entrydate>="2001/2/8";
         B、而使用LIKE运算符和模式匹配，是通过比较串值进行的，因此必须使用标准的时间书写格式，YYYY-MM-DD HH-MM-SS。

     3、时间格式说明
        格式符               格式说明
        %S, %s               两位数字形式的秒(00,01,...,59)
        %i                   两位数字形式的分(00,,01,..,59)
        %H                   两位数字形式的小时，24小时(00,01,...,23)
        %h,%I                两位数字形式的小时，12小时(00,01,...,12)
        %k                   数字形式的小时，24小时(0,1,..,,23)
        %l                   数字形式的小时，12小时(0,1,..,,12)
        %T                   24小时的时间形式(hh:mm:ss)
        %r                   12小时的时间形式(hh:mm:ssAM  hh:mm:ssPM)
        %p                   AM PM
        %W                   一周中每一天的名称(sunday.....)
        %d                   两位数字形式表示月份中的天(01,..,31)
        %e                   数字形式表示月份中的天(1,2,..31)
        %w                   以数字形式表示周中的天数(0=sunday,....,6=saturday)
        %j                   以三位数字表示年中的天数(001,...,366)
        %U                   周(0,1,..,52)，sunday为周的第一天
        %u                   周(0,1,..,52)，monday为周的第一天
        %M                   月名(january,february,...,december)
        %m                   两位数字表示的月份（01,12）
        %c                   数字表示月份(1,2..12)
        %Y                   4位数字年份
        %y                   两位数字年份
        %%                   表示%


四、常见函数
    Concat(s1,s2,..sn)  连接字符串s1~sn为一个字符串
    Insert(str,x,y,insr) 将字符串从第x位置开始，y个字符长的子串替换为字符串insr
    Lower(str) 将字符串转换为小写
    Upper(str) 将字符串转换为大写
    Left(str,x) 返回字符串最左边的x个字符
    Right(str, x) 返回字符串最右边的x个字符
    Lpad(str,n,pad) 用字符串pad对str最左边进行填充，直到长度为n个字符长度
    Rpad(str,n,pad) 用字符串pad对str最右边进行填充，直到长度为n个字符长度
    Ltrim(str) 去掉字符串str左边的空格
    Rtrim(str) 去掉字符串str右边的空格
    Repeat(str, x) 返回str重复x次的结果
    Replase(str, a, b) 用字符串b替换str中所有的a
    Strcmp(s1, s2) 比较字符串s1和s2
    Trim(str) 去掉字符串行首和行尾的空格
    SubString(str, x, y) 返回字符串从x位置起 y个长度的字符串

五、列定义的一些建议：
    尽量将字段设置为Not Null同时设置默认值，自增序列除外。
    数值类的根据需要可以设置为默认0，1等：NOT NULL DEFAULT '1'，同时如果没有需要，都设置UNSIGNED属性
    字符类的Varchar默认设为''： NOT NULL DEFAULT '', ''是空字符串而非空值。
    Text类型没有默认值，但要注意Not Null。
    字符类型的长度设定好了，插入数据时多出的部分不会存入，而INT之类的超出范围取最大值或最小值。
    像status,type这样的字段，是字符a,b,yes,no之类的用varchar或char，如果是数字就用Tinyint就可以。
    一般情况下，如果没有明确指定默认值数据库将默认值设定为NULL(blob,text除外）。



org.springframework.orm-3.1.1.RELEASE.jar ---- 包含Spring对DAO特性集进行了扩展，使其支持 iBATIS、JDO、OJB、TopLink，因为Hibernate 已经独立成包了，现在不包含在这个包里了。这个jar文件里大部分的类都要依赖spring-dao.jar里的类，用这个包时你需要同时包含spring-dao.jar包 。
spring 整合第三方的 ORM 映射支持，如 Hibernate 、Ibatis、Jdo 以及spring的JPA的支持。
spring解析对象关系映射框架、ibatis的template 集成。
orm封装了常见的数据库框架的模板类
spring对ibatis框架的支持，两者集成到一起。   spring对ibatis的支持， 譬如  ibatis的事物可以交给spring来管理啊


iBATIS 操作clob 和blob：
    ibatis2.2后的改变还是挺大的。对于自定义类型支持的也不错，这样对于blob和clob数据的处理也就简单多了。
    不过在spring 中已经提供了很好的实现，所以这又省去了很多的功夫。
    ibatis提供了TypeHandler接口，用于处理数据类型，基本的实现类为BaseTypeHandler
    spring 中，提供了AbstractLobTypeHandler作为基础类，并且提供了相应的模版方法，所有的工作由LobHandler处理。
    iBatis 为处理不同类型的数据定义了一个统一的接口：com.ibatis.sqlmap.engine.type.TypeHandler。这个接口类似于 Hibernate 的 UserType。
    iBatis 本身拥有该接口的众多实现类，如 LongTypeHandler、DateTypeHandler 等，但没有为 LOB 类型提供对应的实现类。
    Spring 在 org.springframework.orm.ibatis.support 包中为我们提供了几个处理 LOB 类型的 TypeHandler 实现类：当结果集中包括 LOB（BLOB、CLOB）数据时，需要在结果集映射配置项中指定对应的 Handler 类.

    有一点需要注意的是，AbstractLobTypeHandler中实现了事务支持，需要用来释放相应的资源，所以一定需要在事务环境中进行。

  BlobByteArrayTypeHandle：主要用于处理BLOB类型数据，将 BLOB 数据映射为 byte[] 类型
       iBATIS的处理器的实现，映射到BLOB的字节数组。检索的LobHandler接口使用SqlMapClientFactoryBean在配置。
       也可以被定义在通用iBATIS的映射，作为DefaultLobCreator将与大多数JDBC的数据库驱动程序兼容。
       在这种情况下，字段类型不必是BLOB格式，如MySQL和MS SQL Server中，任何足够大的二进制类型将工作。

  BlobSerializableTypeHandler: 将 BLOB 数据映射为 Serializable 类型的对象。
       iBATIS的任意得到序列化的对象为BLOB处理器的实现。检索的的LobHandler接口使用SqlMapClientFactoryBean在配置。
       在通用iBATIS的映射，也可以被定义为DefaultLobCreator与大多数JDBC的数据库驱动程序兼容。
       在这种情况下，该字段类型不必是BLOB：对于数据库，如MySQL和MS SQL Server中，任何足够大的二进制类型将工作。

  ClobStringTypeHandler: 用于处理CLOB类型数据，将 CLOB 数据映射为 String 类型
       iBATIS的处理器的实现字符串映射到CLOB的。检索的的LobHandler接口使用SqlMapClientFactoryBean在配置。
       尤其适用于存储超过4000个字符的字符串Oracle数据库（只可能通过的CLOB），结合与OracleLobHandler。
       在通用iBATIS的映射，也可以被定义为DefaultLobCreator与大多数JDBC兼容的数据库驱动程序。
       在这种情况下，该字段类型不必BLOB：对于数据库，如MySQL和MS SQL Server中，任何足够大的二进制类型将工作。

  AbstractLobTypeHandler:  在spring中，提供了AbstractLobTypeHandler作为基础类，并且提供了相应的模版方法，所有的工作由LobHandler处理；AbstractLobTypeHandler中实现了事务支持，需要用来释放相应的资源，所以一定需要在事务环境中进行。
       iBATIS的类型处理器的实现，映射到LOB的抽象基类。检索的的LobHandler接口使用SqlMapClientFactoryBean在配置。
       对于写入LOB的，积极的Spring的事务同步是必需的，是能够注册同步关闭LobCreator的。
       提供模板设置参数和结果值的方法，通过在使用的LobHandler接口或LobCreator的。


 IBatis框架的一些问题的扩展：
     Ibatis针对特殊数据类型的处理,实现必须继承TypeHandler类的接口，在一般的项目中的SqlMapConfig中进行配置。针对特殊的数据类型在数据库不支持的情况下进行回调处理。如Oracle中大数据类型Clob，Blob，Bfile等处理。
     如果和Spring整合可以采用Spring中针对大数据类型的处理。同时必须在配置文件配置。
     在Ibatis项目中：
     <typeHandler jdbcType="BLOB" javaType="Byte[]" callback="org.springframework.orm.ibatis.support.BlobByteArrayTypeHandler" />
     <typeHandler jdbcType="CLOB" javaType="java.lang.String" callback="org.springframework.orm.ibatis.support.ClobStringTypeHandler" />


例子：http://zyl.iteye.com/blog/46865
     1、java代码
     public class Food {
         private String content;
         private String id;
         private byte[] image;
         private String name;
     }

    2、xml代码
    <sqlMap>
        <typeAlias alias="Food" type="org.esoft.hdb.bo.Food"/>
        <resultMap id="foodResult" class="Food">
            <result property="id" column="C_ID"/>
            <result property="name" column="C_NAME"/>
            <result property="content" column="C_content" typeHandler="org.springframework.orm.ibatis.support.ClobStringTypeHandler"/>  // 读取 CLOB 类型数据
            <result property="image" column="C_image" typeHandler="org.springframework.orm.ibatis.support.BlobByteArrayTypeHandler"/>   // 读取 BLOB 类型数据
        </resultMap>

        <insert id="insert" parameterClass="Food">
            insert into T_FOOD ( C_ID, C_NAME, C_CONTENT, C_IMAGE)
            values ( #id#, #name#,
            #content, handler=org.springframework.orm.ibatis.support.ClobStringTypeHandler#,
            #image,handler=org.springframework.orm.ibatis.support.BlobByteArrayTypeHandler#)
        </insert>

        <update id="update" parameterClass="Food"> update T_FOOD set C_NAME = #name#,
            C_CONTENT = #content,handler=org.springframework.orm.ibatis.support.ClobStringTypeHandler#,
            C_IMAGE =#image,handler=org.springframework.orm.ibatis.support.BlobByteArrayTypeHandler#
            where C_ID = #id#
        </update>

    </sqlMap>


    3、spring xml配置：      将 LobHandler 注入到 SqlClientMap 中
        <bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler"/>

        <bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
            <property name="dataSource" ref="dataSource"/>
            <property name="configLocation">
                <value>SqlMapConfig.xml</value>
            </property>
            <property name="lobHandler" ref="lobHandler"/>
        </bean>
        使用 LobHandler 操作 LOB 数据时，需要在事务环境下才能工作，所以必须事先配置事务管理器，否则会抛出异常。
        处理 LOB 数据时，Spring 要求在事务环境下工作，所以还必须配置一个事务管理器。iBatis 的事务管理器和 Spring JDBC 事务管理器相同，此处不再赘述。

    4、测试
        Food food = new Food();
        food.setPk("1");
        food.setName("food1");
        BufferedInputStream in = new BufferedInputStream(getClass().getResourceAsStream("/1.gif"));
        byte[] b = FileCopyUtils.copyToByteArray(in);
        food.setImage(b);
        in = new BufferedInputStream(getClass().getResourceAsStream("/hibernate.cfg.xml"));
        b = FileCopyUtils.copyToByteArray(in);
        food.setContent(new String(b));
        foodService.save(food);

        Food food = foodService.get("1");
        BufferedInputStream in = new BufferedInputStream(getClass() .getResourceAsStream("/jdbc.properties"));
        byte[] b = FileCopyUtils.copyToByteArray(in);
        food.setContent(new String(b));
        foodService.update(food);
        food = foodService.get("1");
        assertNotNull(food.getImage());


详情：http://www.iteye.com/topic/46865
      http://database.ctocio.com.cn/tips/456/7495456_9.shtml








布尔
bit java:boolean
BOOL，BOOLEAN 是TINYINT(1)的同义词。zero值被视为假。非zero值视为真。

数字：
可以正负之分即有符号和无符号UNSIGNED，可以用使用ZEROFILL零填补
如果为一个数值列指定ZEROFILL，MySQL自动为该列添加UNSIGNED属性。

FLOAT    java:float
DOUBLE   java:double
DECIMAL和NUMERIC类型在MySQL中视为相同的类型。它们用于保存必须为确切精度的值，例如货币数据

DECIMAL数据类型是定点类型，其计算是准确的。在MySQL中，DECIMAL类型有多个同义词：NUMERIC、DEC、FIXED。整数类型也是准确值类型。
FLOAT和DOUBLE数据类型是浮点类型，其计算是近似的。在MySQL中，与FLOAT或DOUBLE同义的类型是DOUBLE PRECISION和REAL。


字符串：
CHAR 定长的字符串 java:char 最大长度255 这是CHAR(1)的同义词
VARCHAR 变长字符串 java:string VARCHAR(6)就只能容纳6个字符，无论中英文，最大长度65,535
TEXT java:string 长度65535
TINYTEXT java:string 最大长度为255(28–1)
MEDIUMTEXT java:string 长度 16 777 215
LONGTEXT java:string 长度4 294 967 295

mysql没有CLOB字符大对象，用上面几个大text替代 BLOB和TEXT列不能有 默认值

BINARY类型类似于CHAR类型，但保存二进制字节字符串而不是非二进制字符串。
VARBINARY类型类似于VARCHAR类型，但保存二进制字节字符串而不是非二进制字符串。

二进制： java:byte[]
TINYBLOB  最大长度为255(28–1)
BLOB
MEDIUMBLOB
LONGBLOB

TinyBlob 最大 255
Blob 最大 65K
MediumBlob 最大 16M
LongBlob 最大 4G

大数据需要在mysql服务器中配置max_allowed_packet,不然会有com.mysql.jdbc.PacketTooBigException: Packet for query is too large (5205614 > 1048576). You can change this value on the server by setting the max_allowed_packet' variable.

日期和时间:
DATE 3个字节  日期
DATETIME 8个字节   日期时间
TIMESTAMP 4个字节 时间戳
TIME 3个字节   时间
YEAR 1个字节

TIMESTAMP值不能早于1970或晚于2037。这说明一个日期，例如'1968-01-01'，虽然对于DATETIME或DATE值是有效的
但对于TIMESTAMP值却无效，如果分配给这样一个对象将被转换为0。

另外mysql支持ENUM和SET类型，这个对我们来说不常用

mysql的日志
1,错误日志，记录数据库发生的错误log_error
2,查询日志 一般不打开，为了减轻IO损耗
3,慢查询日志 记录查询慢的语句
4,二进制日志记录DDL,DML，灾难恢复和复制都要打开这个日志