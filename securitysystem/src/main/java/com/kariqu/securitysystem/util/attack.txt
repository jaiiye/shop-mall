
安全：不可能有绝对安全的系统，我们要做的是把损失降到最低

[攻击手段]：
1，Web APP
2，操作系统以及应用软件
3，网络边界，网络设备，网络端口 (路由器，防火墙，IDS，VPN)
4，协议漏洞 ARP,DNS,DHCP
5，社会工程学、钓鱼

我们要做的：

一,[程序部分]

总体原则：不要相信用户的任何输入,搞清楚自己发给用户的是何种数据，学会总结归纳

输入来源：表单，get,cookie，上传等。

安全设计+安全编码+严格测试+深入web服务器配置+深入应用服务器配置+深入数据库安全配置

1.SQL注入：程序不对SQL进行过滤造成，在Java中要用PreparedStatement取代直接拼SQL，厂商驱动程序会对set进去的值进行过滤，数据库异常不要直接扔到界面，需要做特殊处理

2.XSS：跨站脚本，对所有用户的html输入进行过滤,cookie httponly。

3.重定向攻击：对所有的跳转链接进行验证，确保合法跳转

4.CRLF：回车换行

5.CSRF：请求伪造，程序需要严格验证合法的客户端，不能依赖单一的手段，比如只用cookie，常见攻击有图片get，css,script和iframe的src,伪造表单POST，flash,ajax,验证客户端最好不要持久性验证

6.文件上传攻击：用户上传可执行的脚本文件，病毒木马文件，pdf,flash跨站文件，程序要对上传文件做绝对的安全判断，包括格式和扩展名，黑客是可以直接用伪造的数据包提交的。

7.钓鱼：我们只能做到达我们网站后的防钓鱼措施，DNS劫持，堵住XSS,CRSF,URL跳转漏洞，文件上传漏洞, 黑客有更强大的IP欺骗，HOSTS篡改，流量重定向，IDN欺骗技术生成相同的网址等技术

8.服务器目录权限，web url资源权限，对象方法权限，数据实体操作权限

9.不要把敏感信息暴露到get操作和cookie,应该大部分操作用post, get不要有副作用,cookie不要长久，能短则短

二、运维部分

1,机房环境(DDOS,防火墙，入侵检测，入侵预防,ARP预防，肉鸡方案)

2,操作系统的安全配置，日志记录,关闭高危端口，打补丁

3,数据库的安全配置，备份容灾，日志记录

4,web服务器的安全配置,SSL,应用服务器安全配置
