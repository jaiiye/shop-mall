<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!-- 扫描web模块的bean -->
    <context:component-scan base-package="com.kariqu.suppliersystem.*.web">
        <context:exclude-filter type="assignable"
                                expression="com.kariqu.suppliersystem.logistics.web.LogisticDesignController"/>

        <context:exclude-filter type="assignable"
                                expression="com.kariqu.suppliersystem.orderManager.web.OrderController"/>
    </context:component-scan>

    <!--<context:component-scan base-package="com.kariqu.suppliersystem.supplierManager.web">-->
    <!--</context:component-scan>-->

    <mvc:annotation-driven/>

    <bean class="com.kariqu.suppliersystem.logistics.web.LogisticDesignController">
        <property name="logisticPicturePath" value="${logisticPicturePath}"/>
    </bean>

    <bean class="com.kariqu.suppliersystem.orderManager.web.OrderController">
        <property name="developMode" value="${developMode}"/>
    </bean>

    <mvc:resources mapping="/static/**" location="/static/"/>
    <mvc:resources mapping="/ext/**" location="/extjs/"/>
    <mvc:resources mapping="/assets/**" location="/assets/"/>

    <mvc:resources mapping="/favicon.ico" location="/static/favicon.ico"/>


    <bean id="velocityConfig"
          class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <property name="resourceLoaderPath" value="/WEB-INF/default/"/>
        <property name="velocityProperties">
            <props>
                <prop key="input.encoding">UTF-8</prop>
                <prop key="output.encoding">UTF-8</prop>
            </props>
        </property>
    </bean>


    <bean class="org.springframework.web.servlet.view.XmlViewResolver">
        <property name="location" value="/WEB-INF/views.xml"/>
    </bean>

    <bean id="viewResolver"
          class="com.kariqu.suppliersystem.common.KariquVelocityViewResolver">
        <property name="exposeSpringMacroHelpers" value="true"/>
        <property name="requestContextAttribute" value="rc"/>
        <property name="suffix" value=".vm"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <property name="urlBrokerBean" ref="urlBrokerFactory"/>
    </bean>

    <!-- Configure the multipart resolver -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- one of the properties available; the maximum file size in bytes -->
        <property name="maxUploadSize" value="1000000"/>
    </bean>
    <!--AnnotationMethodHandlerExceptionResolver这个异常处理器会自动载入，如果配置了SimpleMappingExceptionResolver则其他不起作用，基于注解的异常处理器要放到每个控制器中 -->
    <!--<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver"></bean>-->

    <!--这个异常处理器，会用异常为key去映射vm，其实是构建一个ModelAndView,view是视图名字，Model中放入了当前的异常,key是exception 代码：DEFAULT_EXCEPTION_ATTRIBUTE = "exception" -->

    <!--
        <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">

            <property name="defaultErrorView" value="error/default"></property>

            <property name="exceptionMappings">
                <props>
                    <prop key="com.kariqu.designcenter.domain.exception.DomIdRepeatException">error/domId</prop>
                    <prop key="com.kariqu.designcenter.client.domain.model.context.CategoryClientSyncException">error/category</prop>
                </props>
            </property>
        </bean>
    -->


</beans>
