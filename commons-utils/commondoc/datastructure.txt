编程本质是两种东西：
1，算法，解决问题的方法和步骤，即程序
2,数据结构，组织数据的方法，在内存中组织或在磁盘中组织

数据结构组织得好可以高效的操作数据
数据结构可以表达对现实数据的存储
它可以只是程序员的工具，比如栈，队列，优先级队列，阻塞队列
有些结构可对现实世界建模，比如图

数据是对客观事物的符号表示，计算机科学中，所有能输入计算机被程序处理的符号都是数据。所以计算机解决问题之前需要把待处理对象符号化，数字化。
目前我们的熟悉的数据，布尔，整型，浮点，字符串，声音，视频等等。

数据结构应该是抽象的，从而得到数据抽象ADT，是OO的基础，所以OO可以封装算法和数据结构

结构种类：
1，数组，向量，按照内存的组织，按下标访问数据元素
2，抽象数组，二维数组，N维数组，邻接表
3，数据元素开始分开，使用链接，这样得到链表，方向可得到双向或者循环链表，或者十字链表，跳表
4，数组和链表都是线性结构，当数据元素不呈线性，出现分支就会得到树状结构，通过分支的情况，得到二叉树，平衡树，多叉树,堆
5，数据元素之间如果出现多对多，则会呈现出图结构，显示中很多结构都是图结构

线性结构如果加以限制则会得到栈，队列，优先级队列等特殊结构

从数据元素的逻辑结构来分析，可能出现下面几种：
1，集合（不考虑任何顺序）
2，线性，有了顺序
3，树，有了层级
4，图，数据元素在集合中随意连接
5,Hash，数据元素藏在key后面，结构管理了key

同样一个结构，作用在上面的算法可能有很多，排序就是典型，因为结构的本身特性使得结构中数据元素的插入，删除，查询等效率不同

数组：插入在数组的末尾很快，如果知道下标访问某个数据元素也很快，但是要查找某个元素就很慢
有序数组：查找稍快，因为可以二分查找，但是插入删除慢
链表：插入快，删除快，但是查找慢
二叉树：查找，删除，插入都快，如果树保持平衡，但是算法很复杂
哈希表：知道key操作很快，不知道key则很查找很慢
图：现实建模，算法复杂而且慢